import unittest
from word2number import w2n


class TestW2N(unittest.TestCase):
    def test_positives(self):
        # English
        self.assertEqual(w2n.word_to_num("two million three thousand nine hundred and eighty four"), 2003984)
        self.assertEqual(w2n.word_to_num("nineteen"), 19)
        self.assertEqual(w2n.word_to_num("two thousand and nineteen"), 2019)
        self.assertEqual(w2n.word_to_num("two million three thousand and nineteen"), 2003019)
        self.assertEqual(w2n.word_to_num('three billion'), 3000000000)
        self.assertEqual(w2n.word_to_num('three million'), 3000000)
        self.assertEqual(w2n.word_to_num('one hundred twenty three million four hundred fifty six thousand seven hundred and eighty nine'), 123456789)
        self.assertEqual(w2n.word_to_num('eleven'), 11)
        self.assertEqual(w2n.word_to_num('nineteen billion and nineteen'), 19000000019)
        self.assertEqual(w2n.word_to_num('one hundred and forty two'), 142)
        self.assertEqual(w2n.word_to_num('112'), 112)
        self.assertEqual(w2n.word_to_num('11211234'), 11211234)
        self.assertEqual(w2n.word_to_num('five'), 5)
        self.assertEqual(w2n.word_to_num('two million twenty three thousand and forty nine'), 2023049)
        self.assertEqual(w2n.word_to_num('two point three'), 2.3)
        self.assertEqual(w2n.word_to_num('two million twenty three thousand and forty nine point two three six nine'), 2023049.2369)
        self.assertEqual(w2n.word_to_num('one billion two million twenty three thousand and forty nine point two three six nine'), 1002023049.2369)
        self.assertEqual(w2n.word_to_num('point one'), 0.1)
        self.assertEqual(w2n.word_to_num('point'), 0)
        self.assertEqual(w2n.word_to_num('point nineteen'), 0.19)
        self.assertEqual(w2n.word_to_num('one hundred thirty-five'), 135)
        self.assertEqual(w2n.word_to_num('hundred'), 100)
        self.assertEqual(w2n.word_to_num('thousand'), 1000)
        self.assertEqual(w2n.word_to_num('million'), 1000000)
        self.assertEqual(w2n.word_to_num('billion'), 1000000000)
        self.assertEqual(w2n.word_to_num('nine point nine nine nine'), 9.999)
        self.assertEqual(w2n.word_to_num('seven point nineteen'), 7.19)
        
        #Spanish
        self.assertEqual(w2n.word_to_num("dos millones tres mil novecientos ochenta y cuatro"), 2003984)
        self.assertEqual(w2n.word_to_num("diecinueve"), 19)
        self.assertEqual(w2n.word_to_num("dos mil diecinueve"), 2019)
        self.assertEqual(w2n.word_to_num("dos millones tres mil diecinueve"), 2003019)
        self.assertEqual(w2n.word_to_num('tres mil millones'), 3000000000)
        self.assertEqual(w2n.word_to_num('tres millones'), 3000000)
        self.assertEqual(w2n.word_to_num('ciento veintitres millones cuatro cientos cincuenta y seis mil setecientos ochenta y nueve'), 123456789)
        self.assertEqual(w2n.word_to_num('once'), 11)
        self.assertEqual(w2n.word_to_num('diecinueve mil millones diecinueve'), 19000000019)
        self.assertEqual(w2n.word_to_num('ciento cuarenta y dos'), 142)
        self.assertEqual(w2n.word_to_num('cinco'), 5)
        self.assertEqual(w2n.word_to_num('dos millones veintitres mil cuarenta y nueve'), 2023049)
        self.assertEqual(w2n.word_to_num('dos coma tres'), 2.3)
        self.assertEqual(w2n.word_to_num('dos millones veintitres mil cuarenta y nueve coma dos tres seis nueve'), 2023049.2369)
        self.assertEqual(w2n.word_to_num('mil millones dos millones veintitres mil cuarenta y nueve coma dos tres seis nueve'), 1002023049.2369)
        self.assertEqual(w2n.word_to_num('cero coma uno'), 0.1)
        self.assertEqual(w2n.word_to_num('coma'), 0)
        self.assertEqual(w2n.word_to_num('coma diecinueve'), 0.19) 
        self.assertEqual(w2n.word_to_num('ciento treinta y cinco'), 135)
        self.assertEqual(w2n.word_to_num('cien'), 100)
        self.assertEqual(w2n.word_to_num('mil'), 1000)
        self.assertEqual(w2n.word_to_num('un millon'), 1000000)
        self.assertEqual(w2n.word_to_num('mil millones'), 1000000000)
        self.assertEqual(w2n.word_to_num('nueve coma novecientos noventa y nueve'), 9.999)
        self.assertEqual(w2n.word_to_num('uno dos tres cuatro'), 1234)
        self.assertEqual(w2n.word_to_num('uno dos'), 12)

    def test_negatives(self):
        self.assertRaises(ValueError, w2n.word_to_num, '112-')
        self.assertRaises(ValueError, w2n.word_to_num, '-')
        self.assertRaises(ValueError, w2n.word_to_num, 'on')
        self.assertRaises(ValueError, w2n.word_to_num, 'million million')
        self.assertRaises(ValueError, w2n.word_to_num, 'three million million')
        self.assertRaises(ValueError, w2n.word_to_num, 'million four million')
        self.assertRaises(ValueError, w2n.word_to_num, 'thousand million')
        self.assertRaises(ValueError, w2n.word_to_num, 'one billion point two million twenty three thousand and forty nine point two three six nine')
        self.assertRaises(ValueError, w2n.word_to_num, 112)

if __name__ == '__main__':
    unittest.main()
